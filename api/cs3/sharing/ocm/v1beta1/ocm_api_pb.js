// source: cs3/sharing/ocm/v1beta1/ocm_api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cs3_identity_user_v1beta1_resources_pb = require('../../../../cs3/identity/user/v1beta1/resources_pb.js');
goog.object.extend(proto, cs3_identity_user_v1beta1_resources_pb);
var cs3_ocm_provider_v1beta1_resources_pb = require('../../../../cs3/ocm/provider/v1beta1/resources_pb.js');
goog.object.extend(proto, cs3_ocm_provider_v1beta1_resources_pb);
var cs3_rpc_v1beta1_status_pb = require('../../../../cs3/rpc/v1beta1/status_pb.js');
goog.object.extend(proto, cs3_rpc_v1beta1_status_pb);
var cs3_sharing_ocm_v1beta1_resources_pb = require('../../../../cs3/sharing/ocm/v1beta1/resources_pb.js');
goog.object.extend(proto, cs3_sharing_ocm_v1beta1_resources_pb);
var cs3_storage_provider_v1beta1_resources_pb = require('../../../../cs3/storage/provider/v1beta1/resources_pb.js');
goog.object.extend(proto, cs3_storage_provider_v1beta1_resources_pb);
var cs3_types_v1beta1_types_pb = require('../../../../cs3/types/v1beta1/types_pb.js');
goog.object.extend(proto, cs3_types_v1beta1_types_pb);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.TermCase', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.FieldCase', null, global);
goog.exportSymbol('proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.repeatedFields_, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.displayName = 'proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.repeatedFields_, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.repeatedFields_, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.displayName = 'proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.displayName = 'proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    resourceId: (f = msg.getResourceId()) && cs3_storage_provider_v1beta1_resources_pb.ResourceId.toObject(includeInstance, f),
    grant: (f = msg.getGrant()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareGrant.toObject(includeInstance, f),
    recipientMeshProvider: (f = msg.getRecipientMeshProvider()) && cs3_ocm_provider_v1beta1_resources_pb.ProviderInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_storage_provider_v1beta1_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storage_provider_v1beta1_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareGrant;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareGrant.deserializeBinaryFromReader);
      msg.setGrant(value);
      break;
    case 4:
      var value = new cs3_ocm_provider_v1beta1_resources_pb.ProviderInfo;
      reader.readMessage(value,cs3_ocm_provider_v1beta1_resources_pb.ProviderInfo.deserializeBinaryFromReader);
      msg.setRecipientMeshProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_storage_provider_v1beta1_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getGrant();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareGrant.serializeBinaryToWriter
    );
  }
  f = message.getRecipientMeshProvider();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cs3_ocm_provider_v1beta1_resources_pb.ProviderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.storage.provider.v1beta1.ResourceId resource_id = 2;
 * @return {?proto.cs3.storage.provider.v1beta1.ResourceId}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storage.provider.v1beta1.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storage_provider_v1beta1_resources_pb.ResourceId, 2));
};


/**
 * @param {?proto.cs3.storage.provider.v1beta1.ResourceId|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.setResourceId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.clearResourceId = function() {
  return this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ShareGrant grant = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareGrant}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.getGrant = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareGrant} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareGrant, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareGrant|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.setGrant = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.clearGrant = function() {
  return this.setGrant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.ocm.provider.v1beta1.ProviderInfo recipient_mesh_provider = 4;
 * @return {?proto.cs3.ocm.provider.v1beta1.ProviderInfo}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.getRecipientMeshProvider = function() {
  return /** @type{?proto.cs3.ocm.provider.v1beta1.ProviderInfo} */ (
    jspb.Message.getWrapperField(this, cs3_ocm_provider_v1beta1_resources_pb.ProviderInfo, 4));
};


/**
 * @param {?proto.cs3.ocm.provider.v1beta1.ProviderInfo|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.setRecipientMeshProvider = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.clearRecipientMeshProvider = function() {
  return this.setRecipientMeshProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareRequest.prototype.hasRecipientMeshProvider = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_sharing_ocm_v1beta1_resources_pb.Share.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.Share;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.Share.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.Share.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Share share = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.Share}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.Share} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.Share, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.Share|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.setShare = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.clearShare = function() {
  return this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.CreateOCMShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.toObject(includeInstance, f),
    field: (f = msg.getField()) && proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareReference;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 3:
      var value = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.serializeBinaryToWriter
    );
  }
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase = {
  FIELD_NOT_SET: 0,
  PERMISSIONS: 2,
  DISPLAY_NAME: 3
};

/**
 * @return {proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getFieldCase = function() {
  return /** @type {proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.FieldCase} */(jspb.Message.computeOneofCase(this, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: (f = msg.getPermissions()) && cs3_sharing_ocm_v1beta1_resources_pb.SharePermissions.toObject(includeInstance, f),
    displayName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField;
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.SharePermissions;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.SharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.SharePermissions.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SharePermissions permissions = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.SharePermissions}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.SharePermissions} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.SharePermissions, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.SharePermissions|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.setPermissions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.clearPermissions = function() {
  return this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.setDisplayName = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.clearDisplayName = function() {
  return jspb.Message.setOneofField(this, 3, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateField field = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.getField = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.UpdateField|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.setField = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.clearField = function() {
  return this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareRequest.prototype.hasField = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest;
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.TermCase = {
  TERM_NOT_SET: 0,
  RESOURCE_ID: 3,
  OWNER: 4,
  CREATOR: 5
};

/**
 * @return {proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.TermCase}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.getTermCase = function() {
  return /** @type {proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.TermCase} */(jspb.Message.computeOneofCase(this, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resourceId: (f = msg.getResourceId()) && cs3_storage_provider_v1beta1_resources_pb.ResourceId.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && cs3_identity_user_v1beta1_resources_pb.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && cs3_identity_user_v1beta1_resources_pb.UserId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter;
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new cs3_storage_provider_v1beta1_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storage_provider_v1beta1_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new cs3_identity_user_v1beta1_resources_pb.UserId;
      reader.readMessage(value,cs3_identity_user_v1beta1_resources_pb.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 5:
      var value = new cs3_identity_user_v1beta1_resources_pb.UserId;
      reader.readMessage(value,cs3_identity_user_v1beta1_resources_pb.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_storage_provider_v1beta1_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cs3_identity_user_v1beta1_resources_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cs3_identity_user_v1beta1_resources_pb.UserId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type = {
  TYPE_INVALID: 0,
  TYPE_NO: 1,
  TYPE_RESOURCE_ID: 2,
  TYPE_OWNER: 3,
  TYPE_CREATOR: 4,
  TYPE_OWNER_PROVIDER: 5,
  TYPE_CREATOR_PROVIDER: 6
};

/**
 * optional Type type = 2;
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.getType = function() {
  return /** @type {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.Type} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional cs3.storage.provider.v1beta1.ResourceId resource_id = 3;
 * @return {?proto.cs3.storage.provider.v1beta1.ResourceId}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storage.provider.v1beta1.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storage_provider_v1beta1_resources_pb.ResourceId, 3));
};


/**
 * @param {?proto.cs3.storage.provider.v1beta1.ResourceId|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.setResourceId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.clearResourceId = function() {
  return this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId owner = 4;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.getOwner = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_identity_user_v1beta1_resources_pb.UserId, 4));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.setOwner = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.identity.user.v1beta1.UserId creator = 5;
 * @return {?proto.cs3.identity.user.v1beta1.UserId}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.getCreator = function() {
  return /** @type{?proto.cs3.identity.user.v1beta1.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_identity_user_v1beta1_resources_pb.UserId, 5));
};


/**
 * @param {?proto.cs3.identity.user.v1beta1.UserId|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.setCreator = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.clearCreator = function() {
  return this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Filter filters = 2;
 * @return {!Array<!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter>}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter, 2));
};


/**
 * @param {!Array<!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter>} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesRequest.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    sharesList: jspb.Message.toObjectList(msg.getSharesList(),
    cs3_sharing_ocm_v1beta1_resources_pb.Share.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse;
  return proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.Share;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.Share.deserializeBinaryFromReader);
      msg.addShares(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getSharesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.Share.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Share shares = 3;
 * @return {!Array<!proto.cs3.sharing.ocm.v1beta1.Share>}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.getSharesList = function() {
  return /** @type{!Array<!proto.cs3.sharing.ocm.v1beta1.Share>} */ (
    jspb.Message.getRepeatedWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.Share, 3));
};


/**
 * @param {!Array<!proto.cs3.sharing.ocm.v1beta1.Share>} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.setSharesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.Share=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.sharing.ocm.v1beta1.Share}
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.addShares = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cs3.sharing.ocm.v1beta1.Share, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListOCMSharesResponse.prototype.clearSharesList = function() {
  return this.setSharesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareReference;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.RemoveOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareReference;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_sharing_ocm_v1beta1_resources_pb.Share.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.Share;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.Share.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.Share.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Share share = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.Share}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.Share} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.Share, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.Share|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.setShare = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.clearShare = function() {
  return this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetOCMShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest;
  return proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    sharesList: jspb.Message.toObjectList(msg.getSharesList(),
    cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse;
  return proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.deserializeBinaryFromReader);
      msg.addShares(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getSharesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ReceivedShare shares = 3;
 * @return {!Array<!proto.cs3.sharing.ocm.v1beta1.ReceivedShare>}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.getSharesList = function() {
  return /** @type{!Array<!proto.cs3.sharing.ocm.v1beta1.ReceivedShare>} */ (
    jspb.Message.getRepeatedWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare, 3));
};


/**
 * @param {!Array<!proto.cs3.sharing.ocm.v1beta1.ReceivedShare>} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.setSharesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.ReceivedShare=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.sharing.ocm.v1beta1.ReceivedShare}
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.addShares = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cs3.sharing.ocm.v1beta1.ReceivedShare, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.ListReceivedOCMSharesResponse.prototype.clearSharesList = function() {
  return this.setSharesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.toObject(includeInstance, f),
    field: (f = msg.getField()) && proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareReference;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 3:
      var value = new proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField;
      reader.readMessage(value,proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.serializeBinaryToWriter
    );
  }
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.FieldCase = {
  FIELD_NOT_SET: 0,
  DISPLAY_NAME: 1,
  STATE: 2
};

/**
 * @return {proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.FieldCase}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.getFieldCase = function() {
  return /** @type {proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.FieldCase} */(jspb.Message.computeOneofCase(this, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField;
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 2:
      var value = /** @type {!proto.cs3.sharing.ocm.v1beta1.ShareState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.cs3.sharing.ocm.v1beta1.ShareState} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string display_name = 1;
 * @return {string}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.setDisplayName = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.clearDisplayName = function() {
  return jspb.Message.setOneofField(this, 1, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.hasDisplayName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareState state = 2;
 * @return {!proto.cs3.sharing.ocm.v1beta1.ShareState}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.getState = function() {
  return /** @type {!proto.cs3.sharing.ocm.v1beta1.ShareState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cs3.sharing.ocm.v1beta1.ShareState} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.setState = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.clearState = function() {
  return jspb.Message.setOneofField(this, 2, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UpdateField field = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.getField = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField} */ (
    jspb.Message.getWrapperField(this, proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.UpdateField|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.setField = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.clearField = function() {
  return this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareRequest.prototype.hasField = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.UpdateReceivedOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest;
  return proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ShareReference;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ShareReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 1;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 1));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareReference ref = 2;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ShareReference}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ShareReference, 2));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ShareReference|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.setRef = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.clearRef = function() {
  return this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_v1beta1_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_v1beta1_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse;
  return proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_v1beta1_status_pb.Status;
      reader.readMessage(value,cs3_rpc_v1beta1_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_v1beta1_types_pb.Opaque;
      reader.readMessage(value,cs3_types_v1beta1_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare;
      reader.readMessage(value,cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_v1beta1_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_v1beta1_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.v1beta1.Status status = 1;
 * @return {?proto.cs3.rpc.v1beta1.Status}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.v1beta1.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_v1beta1_status_pb.Status, 1));
};


/**
 * @param {?proto.cs3.rpc.v1beta1.Status|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.v1beta1.Opaque opaque = 2;
 * @return {?proto.cs3.types.v1beta1.Opaque}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.v1beta1.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_v1beta1_types_pb.Opaque, 2));
};


/**
 * @param {?proto.cs3.types.v1beta1.Opaque|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.setOpaque = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.clearOpaque = function() {
  return this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ReceivedShare share = 3;
 * @return {?proto.cs3.sharing.ocm.v1beta1.ReceivedShare}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.sharing.ocm.v1beta1.ReceivedShare} */ (
    jspb.Message.getWrapperField(this, cs3_sharing_ocm_v1beta1_resources_pb.ReceivedShare, 3));
};


/**
 * @param {?proto.cs3.sharing.ocm.v1beta1.ReceivedShare|undefined} value
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
*/
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.setShare = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse} returns this
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.clearShare = function() {
  return this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.sharing.ocm.v1beta1.GetReceivedOCMShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.cs3.sharing.ocm.v1beta1);
